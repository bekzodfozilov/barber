from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode
from handlers.users.data import RuWriteData, RuCheckData
from handlers.users.rucheckday import RuCheckDay
from handlers.users.ruchecktime import RuCheckTimeText
from keyboards.default.default import Ru_Contact_Button, Ru_Haircuts_Button, Ru_Yes_No_Button, Confirmed
from dm.ru_dm import Ru_September
from loader import UABarbershop, bot
from states.states import Condition
import aiogram.utils.markdown as md


@UABarbershop.message_handler(text="–†—É—Å—Å–∫–∏–πüá∑üá∫", state=Condition.Language)
async def Ru_Language_Process(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['Language'] = message.text
    await message.answer("<b>Usta Abdulloh</b> - –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –≤ 1999 –≥–æ–¥—É.\
–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–∞–º–æ–º —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞ –∏ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –º–µ—Å—Ç–æ–º –∫–∞–∫ –¥–ª—è –º—É–∂—á–∏–Ω, —Ç–∞–∫ –∏ –¥–ª—è –∂–µ–Ω—â–∏–Ω.\
–ë–∞—Ä–±–µ—Ä—à–æ–ø –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Å–ª—É–≥–∏, –≤–∫–ª—é—á–∞—è —Å—Ç—Ä–∏–∂–∫–∏, –±—Ä–∏—Ç—å–µ, –º–∞—Å—Å–∞–∂ –≥–æ–ª–æ–≤—ã, —Å—Ç—Ä–∏–∂–∫—É –±–æ—Ä–æ–¥—ã –∏ —É–∫–ª–∞–¥–∫—É –≤–æ–ª–æ—Å.\
–ü–µ—Ä—Å–æ–Ω–∞–ª <b>Usta Abdulloh</b> –æ–±–ª–∞–¥–∞–µ—Ç –≤—ã—Å–æ–∫–æ–π –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∏ –æ–ø—ã—Ç–æ–º –∏ —Å—Ç—Ä–µ–º–∏—Ç—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º –Ω–∞–∏–ª—É—á—à–∏–π —Å–µ—Ä–≤–∏—Å.",
                         parse_mode="HTML")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è. –ú—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–ø—Ä–æ—Å–∏—Ç—å –≤–∞—Å –∫–æ–µ –æ —á–µ–º!\
 –¢–æ –µ—Å—Ç—å –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç—É —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å—è–∫–∏—Ö —Ü–∏—Ñ—Ä –∏ –±—É–∫–≤.",
                         reply_markup=types.ReplyKeyboardRemove())
    await Condition.Ru_Username.set()


@UABarbershop.message_handler(state=Condition.Ru_Username)
async def Ru_Username_Process(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['Ru_Username'] = message.text
    await message.answer(
        "–ß—Ç–æ–±—ã –Ω–∞—à–∏ –±–∞—Ä–±–µ—Ä—ã —Å–≤—è–∑–∞–ª–∏—Å—å —Å –≤–∞–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´üì±¬ª",
        reply_markup=Ru_Contact_Button)
    await Condition.Ru_Contact.set()


@UABarbershop.message_handler(lambda message: message.text not in ["üì±"], state=Condition.Ru_Contact)
async def Incorrect_Ru_Contact(message: types.Message):
    return await message.answer(
        "üö´–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!üôÖüèª‚Äç‚ôÇÔ∏è\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´üì±¬ª", parse_mode="HTML")


@UABarbershop.message_handler(content_types=["contact"], state=Condition.Ru_Contact)
async def Ru_Contact_Process(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['Ru_Contact'] = message.contact.phone_number
    await message.answer("üíáüèª‚Äç‚ôÇÔ∏è–ö–∞–∫—É—é —Å—Ç—Ä–∏–∂–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ?", reply_markup=Ru_Haircuts_Button)
    await Condition.Ru_Haircuts.set()


@UABarbershop.message_handler(
    lambda message: message.text not in ["–î–µ—Ç—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞", "–°—Ç–∞–Ω–¥–∞—Ä—Ç", "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å—Ç—Ä–∏–∂–∫–∞", "–°–≤–∞–¥–µ–±–Ω–∞—è —Å—Ç—Ä–∏–∂–∫–∞"],
    state=Condition.Ru_Haircuts)
async def Incorrect_Ru_Haircuts(message: types.Message):
    return await message.answer("üö´–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç—Ä–∏–∂–∫–∏!\n–í—ã–±–µ—Ä–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –∫–∞–∫—É—é —Å—Ç—Ä–∏–∂–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ.")


@UABarbershop.message_handler(text="–î–µ—Ç—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞", state=Condition.Ru_Haircuts)
async def Ru_Children_Haircuts_Process(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['Ru_Haircuts'] = message.text
    await message.answer("üë¶üèª–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –¥–µ—Ç—Å–∫—É—é —Å—Ç—Ä–∏–∂–∫—É?\n\n‚Ä¢ –°—Ç—Ä–∏–∂–∫–∞ –≤–æ–ª–æ—Åüíáüèª‚Äç‚ôÇÔ∏è\n‚Ä¢ –ú—ã—Ç—å–µ –≤–æ–ª–æ—Åüöø\n\
‚Ä¢ –£–∫–ª–∞–¥–∫–∞ –≤–æ–ª–æ—Å‚ú®\n\nüìã–¶–µ–Ω–∞: 100.000 - 150.000 UZSüí∏\n\n–í—ã–±–∏—Ä–∞–µ—Ç–µ –¥–µ—Ç—Å–∫—É—é —Å—Ç—Ä–∏–∂–∫—É?", reply_markup=Ru_Yes_No_Button)
    await Condition.Ru_Yes_No.set()


@UABarbershop.message_handler(text="–°—Ç–∞–Ω–¥–∞—Ä—Ç", state=Condition.Ru_Haircuts)
async def Ru_Standart_Haircut_Process(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['Ru_Haircuts'] = message.text
    await message.answer("‚≠êÔ∏è–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç?\n\n‚Ä¢ –°—Ç—Ä–∏–∂–∫–∞ –≤–æ–ª–æ—Åüíáüèª‚Äç‚ôÇÔ∏è\n‚Ä¢ –ú—ã—Ç—å–µ –≤–æ–ª–æ—Åüöø\n\
‚Ä¢ –ú–∞—Å—Å–∞–∂ –≥–æ–ª–æ–≤—ãüíÜüèª\n\nüìã–¶–µ–Ω–∞: 150.000 UZSüí∏\n\n–í—ã–±–∏—Ä–∞–µ—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç—Ä–∏–∂–∫—É?", reply_markup=Ru_Yes_No_Button)
    await Condition.Ru_Yes_No.set()


@UABarbershop.message_handler(text="–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å—Ç—Ä–∏–∂–∫–∞", state=Condition.Ru_Haircuts)
async def Ru_Advanced_Haircut_Process(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['Ru_Haircuts'] = message.text
    await message.answer("‚ö°Ô∏è–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é —Å—Ç—Ä–∏–∂–∫—É?\n\n‚Ä¢ –°—Ç—Ä–∏–∂–∫–∞ –≤–æ–ª–æ—Åüíáüèª‚Äç‚ôÇÔ∏è\n‚Ä¢ –ú—ã—Ç—å–µ –≤–æ–ª–æ—Åüöø\n\
‚Ä¢ –ú–∞—Å—Å–∞–∂ –≥–æ–ª–æ–≤—ãüíÜüèª\n‚Ä¢ –ö—Ä–µ–º –¥–ª—è –≤–æ–ª–æ—Åüß¥\n‚Ä¢ –£–∫–ª–∞–¥–∫–∞ –≤–æ–ª–æ—Åüí´\n\n\
üìã–¶–µ–Ω–∞: 200.000 - 250.000 UZSüí∏\n\n–í—ã–±–∏—Ä–∞–µ—Ç–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é —Å—Ç—Ä–∏–∂–∫—É?", reply_markup=Ru_Yes_No_Button)
    await Condition.Ru_Yes_No.set()


@UABarbershop.message_handler(text="–°–≤–∞–¥–µ–±–Ω–∞—è —Å—Ç—Ä–∏–∂–∫–∞", state=Condition.Ru_Haircuts)
async def Ru_Wedding_Haircut_Process(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['Ru_Haircuts'] = message.text
    await message.answer("üë©‚Äç‚ù§Ô∏è‚Äçüë®–°–≤–∞–¥–µ–±–Ω–∞—è –ø—Ä–∏—á—ë—Å–∫–∞:\nüìã–¶–µ–Ω–∞: 50 - 100 USDüí∏\n\n–í—ã–±–∏—Ä–∞–µ—Ç–µ —Å–≤–∞–¥–µ–±–Ω—É—é —Å—Ç—Ä–∏–∂–∫—É?",
                         reply_markup=Ru_Yes_No_Button)
    await Condition.Ru_Yes_No.set()


@UABarbershop.message_handler(lambda message: message.text not in ["–î–∞", "–ù–µ—Ç"], state=Condition.Ru_Yes_No)
async def Incorrect_Ru_Yes_No(message: types.Message):
    return await message.answer("–ï—Å–ª–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã —Å –≤—ã–±–æ—Ä–æ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–î–∞\".\
 –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –ø—Ä–∏—á–µ—Å–∫—É –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ù–µ—Ç\".")


@UABarbershop.message_handler(text="–ù–µ—Ç", state=Condition.Ru_Yes_No)
async def Ru_No_Process(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['Ru_Yes_No'] = message.text
    await message.answer("üíáüèª‚Äç‚ôÇÔ∏è–ö–∞–∫—É—é —Å—Ç—Ä–∏–∂–∫—É –≤—ã –≤—ã–±–µ—Ä–µ—Ç–µ?", reply_markup=Ru_Haircuts_Button)
    await Condition.Ru_Haircuts.set()


@UABarbershop.message_handler(text="–î–∞", state=Condition.Ru_Yes_No)
async def Ru_Yes_Process(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['Ru_Yes_No'] = message.text
    await message.answer("üö∂üèª‚Äç‚ôÇÔ∏è–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –í–∞—à–µ–≥–æ –ø—Ä–∏–±—ã—Ç–∏—è –≤ —Å–µ–Ω—Ç—è–±—Ä–µ.\n–ù–∞–ø—Ä–∏–º–µ—Ä: 31-—Å–µ–Ω—Ç—è–±—Ä—å.",
                         reply_markup=types.ReplyKeyboardRemove(), parse_mode="HTML")
    await Condition.Ru_DM.set()


@UABarbershop.message_handler(lambda message: message.text not in Ru_September, state=Condition.Ru_DM)
async def Incorrect_Ru_DM(message: types.Message):
    return await message.answer("üö´–ß–∏—Å–ª–æ –∏ –º–µ—Å—è—Ü –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!üôÖüèª‚Äç‚ôÇÔ∏è\n–ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞ –º–µ—Å—è—Ü —Å–µ–Ω—Ç—è–±—Ä—å.")


@UABarbershop.message_handler(state=Condition.Ru_DM)
async def Ru_DM_Process(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['Ru_DM'] = message.text
    async with state.proxy() as data:
        data['check'] = Ru_September.index(message.text)
    if await RuCheckDay(state):
        text = await RuCheckTimeText(state)
        await message.answer("üï∞–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –í–∞—à–µ–≥–æ –ø—Ä–∏–±—ã—Ç–∏—è —Å <b>9:00</b> –¥–æ <b>0:00.</b>\n\
‚è≥–ß–∞—Å–æ–≤–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–æ–ª—á–∞—Å–∞.\n‚ùï–ù–∞–ø—Ä–∏–º–µ—Ä: 10:00 –∏–ª–∏ 10:30.\
\n\nüéØ–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Å—ã: " + text)
        await Condition.Ru_Oclock.set()
    else:
        await message.answer("üóì–î–∞—Ç–∞ –∏ –º–µ—Å—è—Ü –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è!üôÖ‚Äç‚ôÇÔ∏è\n–ù–∞–ø–æ–º–∏–Ω–∞–µ–º! –ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–µ–Ω—Ç—è–±—Ä—å\
–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ—à–ª—ã–µ –¥–∞—Ç—ã –∏ –º–µ—Å—è—Ü—ã.")


@UABarbershop.message_handler(
    lambda message: message.text not in ["9:00", "9:30", "10:00", "10:30", "11:00", "11:30", "12:00", "12:30", "13:00",
                                         "13:30", "14:00", "14:30", "15:00", "15:30", "16:00", "16:30", "17:00",
                                         "17:30",
                                         "18:00", "18:30", "19:00", "19:30", "20:00", "20:30", "21:00", "21:30",
                                         "22:00",
                                         "22:30", "23:00", "23:30", "0:00"],
    state=Condition.Ru_Oclock)
async def Incorrect_Oclock(message: types.Message):
    return await message.answer("üö´–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏!\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –í–∞—à–µ–≥–æ –ø—Ä–∏–±—ã—Ç–∏—è —Å <b>9:00</b> –¥–æ\
 <b>0:00.</b>\n‚è≥–ß–∞—Å–æ–≤–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–æ–ª—á–∞—Å–∞.\n‚ùï–ù–∞–ø—Ä–∏–º–µ—Ä: 10:00 –∏–ª–∏ 10:30.", parse_mode="HTML")


@UABarbershop.message_handler(state=Condition.Ru_Oclock)
async def Ru_Oclock_Process(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['Ru_Oclock'] = message.text
    if await RuCheckData(state):
        await RuWriteData(state)
    else:
        return await message.answer(
            "–≠—Ç–æ –º–µ—Å—Ç–æ —É–∂–µ –∑–∞–Ω—è—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ø–∏—Å–æ–∫ –≤—ã—à–µüëÜ")
    await bot.send_message(
        message.chat.id,
        md.text(
            md.text("üìù–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –ø—Ä–∏–Ω—è—Ç—ã."),
            md.text("üë§–í–∞—à–∞ –∏–º—è:", md.text(data["Ru_Username"])),
            md.text("üìû–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", md.text(data["Ru_Contact"])),
            md.text("üóì–ß–∏—Å–ª–æ –∏ –º–µ—Å—è—Ü:", md.text(data["Ru_DM"])),
            md.text("üíáüèª‚Äç‚ôÇÔ∏è–ü—Ä–∏—á–µ—Å–∫–∞:", md.text(data["Ru_Haircuts"])),
            md.text("‚è∞–í—Ä–µ–º—è:", md.text(data["Ru_Oclock"])),
            sep="\n",
        ),
        reply_markup=types.ReplyKeyboardRemove(),
        parse_mode=ParseMode.MARKDOWN,
    )
    await bot.send_message(chat_id="@UzPythonTelegramBotsGroup", text=md.text("üìù–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞;\
                                                \nüë§–ò–º—è:", md.text(data["Ru_Username"],
                                                                  "\nüìû–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", md.text(data["Ru_Contact"],
                                                                                                "\nüóì–ß–∏—Å–ª–æ –∏ –º–µ—Å—è—Ü:",
                                                                                                md.text(data["Ru_DM"],
                                                                                                        "\nüíáüèª‚Äç‚ôÇÔ∏è–ü—Ä–∏—á–µ—Å–∫–∞:",
                                                                                                        md.text(data[
                                                                                                                    "Ru_Haircuts"],
                                                                                                                "\n‚è∞–í—Ä–µ–º—è:",
                                                                                                                md.text(
                                                                                                                    data[
                                                                                                                        "Ru_Oclock"])))))),
                           reply_markup=Confirmed)

    await state.finish()
